import { CampFire } from './CampfireDto';
import { CardChoice } from './CardChoiceDto';
import { DamageTaken } from './DamageTakenDto';
import { EventChoice } from './EventChoiceDto';
import { NeowBonus } from './NeowBonusDto';
import { BossRelic } from './relics/BossRelicDto';
import { KeyRelic } from './relics/KeyRelicDto';
import { Relic } from './relics/RelicDto';
import { Reward } from './RewardDto';
import { Shop } from './ShopDto';

export default interface RunDto {
  ascensionLevel: number;
  blueKeyRelicSkippedLog: KeyRelic;
  bossRelics: Array<BossRelic>;
  buildVersion: string;
  campfireChoices: Array<CampFire>;
  campfireRested: number;
  campfireUpgraded: number;
  cardChoices: Array<CardChoice>;
  characterChosen: 'IRONCLAD' | 'DEFECT' | 'THE_SILENT' | 'WATCHER';
  choseSeed: false;
  circletCount: number;
  currentHpPerFloor: Array<number>;
  damageTaken: Array<DamageTaken>;
  eventChoices: Array<EventChoice>;
  floorExitPlaytime: Array<number>;
  floorReached: number;
  gold: number;
  goldPerFloor: Array<number>;
  greenKeyTakenLog: number;
  improvableCards: unknown;
  isAscensionMode: boolean;
  isBeta: boolean;
  isDaily: boolean;
  isEndless: boolean;
  isProd: boolean;
  isTrial: boolean;
  itemPurchaseFloors: Array<number>;
  itemsPurchased: Array<string>;
  itemsPurged: Array<string>;
  itemsPurgedFloors: Array<number>;
  killedBy: string;
  localTime: string;
  masterDeck: Array<string>;
  maxHpPerFloor: Array<number>;
  neowBonus: string;
  neowBonusLog: NeowBonus;
  neowBonusesSkippedLog: Array<string>;
  neowCost: string;
  neowCostSkippedLog: Array<string>;
  pathPerFloor: Array<string>;
  pathTaken: Array<string>;
  play_id: string;
  playerExperience: number;
  playtime: number;
  potionDiscardPerFloor: Array<Array<string>>;
  potionUsePerFloor: Array<Array<string>>;
  potionsFloorSpawned: Array<number>;
  potionsFloorUsage: Array<number>;
  potionsObtainedAlchemize: Array<Array<string>>;
  potionsObtainedEntropicBrew: Array<Array<string>>;
  purchasedPurges: number;
  relicStats: unknown; //to do
  relics: Array<string>;
  relicsObtained: Array<Relic>;
  rewardsSkipped: Array<Reward>;
  score: number;
  scoreBreakdown: Array<string>;
  seedPlayed: string;
  seedSourceTimestamp: number;
  shopContents: Array<Shop>;
  timestamp: number;
  victory: boolean;
  win_rate: number;
}
